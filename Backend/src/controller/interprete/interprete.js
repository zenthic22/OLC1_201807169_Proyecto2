/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,19],$V5=[1,38],$V6=[1,21],$V7=[1,22],$V8=[1,31],$V9=[1,33],$Va=[1,34],$Vb=[1,32],$Vc=[1,35],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,36],$Vl=[1,37],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[2,5,19,20,21,22,23,38,39,43,48,49,50,51,52,55,59,61,63,64,65,66,68,70,72,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$VA=[18,40,41,71,72,73,74,75,76,77,78,79,80],$VB=[2,115],$VC=[1,68],$VD=[1,65],$VE=[1,66],$VF=[1,67],$VG=[1,78],$VH=[1,79],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,76],$VP=[1,77],$VQ=[1,80],$VR=[1,81],$VS=[1,88],$VT=[1,87],$VU=[1,91],$VV=[33,41,43],$VW=[18,25,26,34,38,40,41,53,54,71,72,73,74,75,76,77,78,79,80],$VX=[1,107],$VY=[18,26,30,33],$VZ=[2,32],$V_=[1,115],$V$=[1,116],$V01=[1,151],$V11=[25,26],$V21=[1,173],$V31=[18,25,26,34,38,40,41,53,54,71,72,77,78,79,80],$V41=[18,25,26,34,38,40,41,53,54,71,72,73,74,76,77,78,79,80],$V51=[18,25,26,34,38,53,54,77,78,79,80],$V61=[18,25,26,34,38,40,41,53,54,77,78,79,80],$V71=[1,194],$V81=[2,5,19,20,21,22,23,38,39,43,48,49,50,51,52,55,58,59,61,63,64,65,66,68,70,72,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$V91=[1,215],$Va1=[2,116],$Vb1=[1,255],$Vc1=[18,25],$Vd1=[2,117],$Ve1=[26,38],$Vf1=[38,61,63],$Vg1=[2,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFPRINT":7,"DECLARACION":8,"ASIGNACION":9,"SENTENCIAIF":10,"SENTENCIASWITCH":11,"CICLOWHILE":12,"SENTENCIAFOR":13,"SENTENCIADOWHILE":14,"SENTENCIAFUNCION":15,"LLAMADAFUNCION":16,"RETORNAR":17,"PUNTO_COMA":18,"BREAK":19,"CONTINUE":20,"MAIN":21,"RPRINT":22,"PARIZQ":23,"LISTAEXPRESION":24,"PARDER":25,"COMA":26,"EXPRESION":27,"TIPOS":28,"DECLARAVARIOS":29,"IGUAL":30,"TERNARIO":31,"CASTEO":32,"CORIZQ":33,"CORDER":34,"NEW":35,"LLAVEIZQ":36,"LISTAVALORES":37,"LLAVEDER":38,"LIST":39,"MENOR":40,"MAYOR":41,"TOCHARARRAY":42,"ID":43,"PUNTO":44,"ADD":45,"ASIGNACION2":46,"TIPOCASTEO":47,"RENTERO":48,"RDOUBLE":49,"RCHAR":50,"RSTRING":51,"RBOOLEAN":52,"INTERROGACION":53,"DOS_PUNTOS":54,"IF":55,"STATEMENT":56,"SENTENCIAELSE":57,"ELSE":58,"SWITCH":59,"LISTACASOS":60,"CASE":61,"CASESTATEMENT":62,"DEFAULT":63,"WHILE":64,"FOR":65,"DO":66,"PARAMETROS":67,"VOID":68,"LISTAPARAMETROS":69,"RETURN":70,"MAS":71,"MENOS":72,"POR":73,"DIVISION":74,"POTENCIA":75,"MODULO":76,"IGUALACION":77,"DIFERENCIACION":78,"AND":79,"OR":80,"NOT":81,"ENTERO":82,"DECIMAL":83,"CADENA":84,"CARACTER":85,"TRUE":86,"FALSE":87,"TOLOWER":88,"TOUPPER":89,"LENGTH":90,"TRUNCATE":91,"ROUND":92,"TYPEOF":93,"TOSTRING":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PUNTO_COMA",19:"BREAK",20:"CONTINUE",21:"MAIN",22:"RPRINT",23:"PARIZQ",25:"PARDER",26:"COMA",30:"IGUAL",33:"CORIZQ",34:"CORDER",35:"NEW",36:"LLAVEIZQ",38:"LLAVEDER",39:"LIST",40:"MENOR",41:"MAYOR",42:"TOCHARARRAY",43:"ID",44:"PUNTO",45:"ADD",48:"RENTERO",49:"RDOUBLE",50:"RCHAR",51:"RSTRING",52:"RBOOLEAN",53:"INTERROGACION",54:"DOS_PUNTOS",55:"IF",58:"ELSE",59:"SWITCH",61:"CASE",63:"DEFAULT",64:"WHILE",65:"FOR",66:"DO",68:"VOID",70:"RETURN",71:"MAS",72:"MENOS",73:"POR",74:"DIVISION",75:"POTENCIA",76:"MODULO",77:"IGUALACION",78:"DIFERENCIACION",79:"AND",80:"OR",81:"NOT",82:"ENTERO",83:"DECIMAL",84:"CADENA",85:"CARACTER",86:"TRUE",87:"FALSE",88:"TOLOWER",89:"TOUPPER",90:"LENGTH",91:"TRUNCATE",92:"ROUND",93:"TYPEOF",94:"TOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[7,5],[24,3],[24,1],[8,3],[8,5],[8,5],[8,5],[8,4],[8,11],[8,9],[8,12],[8,11],[29,3],[29,1],[37,3],[37,1],[9,4],[9,4],[9,4],[9,3],[9,2],[9,7],[9,7],[9,9],[9,7],[46,3],[46,3],[46,3],[32,4],[47,1],[47,1],[47,1],[28,1],[28,1],[28,1],[28,1],[28,1],[31,5],[10,6],[57,2],[57,2],[57,0],[56,3],[56,2],[56,2],[11,7],[11,2],[60,4],[60,5],[60,3],[60,4],[62,1],[62,0],[12,5],[13,8],[13,8],[13,8],[13,8],[14,7],[15,6],[15,5],[15,6],[15,5],[67,4],[67,2],[16,4],[16,5],[69,3],[69,1],[17,1],[17,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,4],[27,6],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4],[27,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 21: case 32: case 34: case 87:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 58: case 59:
 this.$ = $$[$0]; 
break;
case 14: case 108:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 16:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 17:
 this.$ = new Main($$[$01],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 18: case 63: case 65:
 console.log('Error sintactico: '+yytext+', en la linea: '+this._$.first_line+', en la columna: '+this._$.first_column); 
break;
case 19:
 this.$ = new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 20: case 31: case 33: case 86:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 22:
 this.$ = new Declarar($$[$0-2],$$[$0-1],null,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 23: case 24: case 25:
 this.$ = new Declarar($$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 26:
 this.$ = new Declarar($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 27:
 this.$ = new DeclararVector($$[$0-10],$$[$0-9],null,_$[$0-10].first_line, _$[$0-10].first_column,$$[$0-2],$$[$0-4]); 
break;
case 28:
 this.$ = new DeclararVector($$[$0-8],$$[$0-7],$$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column,null,null); 
break;
case 29:
 this.$ = new DeclararLista($$[$0-9],$$[$0-7],$$[$0-2],[],_$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 30:
 this.$ = new DeclararListaChar($$[$0-8],$$[$0-6],$$[$0-2],_$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 35: case 36: case 37:
 this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 38: case 44: case 45: case 46:
 this.$ = new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
/*aqui no hay nada*/
break;
case 40:
 this.$ = new AsignarVector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 41:
 this.$ = new AsignarLista($$[$0-4],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 42:
 this.$ = new ModificarLista($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 43:
 this.$ = new AsignarListaChar($$[$0-6],$$[$0-2],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 47:
 this.$ = new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column,null); 
break;
case 48: case 51:
 this.$ = 0; 
break;
case 49: case 53:
 this.$ = 3; 
break;
case 50: case 54:
 this.$ = 4; 
break;
case 52:
 this.$ = 1; 
break;
case 55:
 this.$ = 2; 
break;
case 56:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 57:
 this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 60:
 this.$ = null 
break;
case 61:
 this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
 this.$ = new SwitchCase($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
 this.$ = []; this.$.push([$$[$0-2], $$[$0]]); 
break;
case 67:
 this.$ = $$[$0-4]; this.$.push([$$[$0-2], $$[$0]]); 
break;
case 68:
 this.$ = new Default(_$[$0-2].first_line, _$[$0-2].first_column),$$[$0]]); 
break;
case 69:
 this.$ = new Default(_$[$0-3].first_line, _$[$0-3].first_column),$$[$0]]); 
break;
case 70:
 this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$ = new Statement([], _$[$0].first_line, _$[$0].first_column); 
break;
case 72:
 this.$ = new While($$[$0-2], $$[$0],  _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 73: case 74: case 75: case 76:
 this.$ = new For($$[$0-5], $$[$0-4],$$[$0-2],$$[$0], _$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 77:
 this.$ = new DoWhile($$[$0-2], $$[$0-5],  _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 78:
 this.$ = new Funcion($$[$0-4], $$[$0],$$[$0-2],7, _$[$0-5].first_line, _$[$0-5].first_column,$$[$0-5]); 
break;
case 79:
 this.$ = new Funcion($$[$0-3], $$[$0],[],7, _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-4]); 
break;
case 80:
 this.$ = new Funcion($$[$0-4], $$[$0],$$[$0-2],8, _$[$0-5].first_line, _$[$0-5].first_column,nul); 
break;
case 81:
 this.$ = new Funcion($$[$0-3], $$[$0],[],8, _$[$0-4].first_line, _$[$0-4].first_column,null); 
break;
case 82:
 $$[$0-3].push([$$[$0-1], $$[$0]]); this.$ = $$[$0-3]; 
break;
case 83:
 this.$ = []; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 84:
 this.$ = new LlamadaFuncion($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new LlamadaFuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 88:
 this.$ = new Return(_$[$0].first_line, _$[$0].first_column,null); 
break;
case 89:
 this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0]); 
break;
case 90:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Aritmetica($$[$0],new Primitivo("-1",TipoPrimitivo.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column),TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALIGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENCIACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Relacional($$[$0-3],$$[$0],TipoRelacional.MENORIGUAL, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 102:
 this.$ = new Relacional($$[$0-3],$$[$0],TipoRelacional.MAYORIGUAL, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 103:
 this.$ = new Logicos($$[$0-2],$$[$0], TipoLogico.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
 this.$ = new Logicos($$[$0-2],$$[$0],TipoLogico.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
 this.$ = new Logicos($$[$0],$$[$0], TipoLogico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new IncrementoDecremento(0,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 107:
 this.$ = new IncrementoDecremento(1,$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2]); 
break;
case 109:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 110:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 112:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.CARACTER, _$[$0].first_line, _$[$0].first_column); 
break;
case 113: case 114:
 this.$ = new Primitivo($$[$0],TipoPrimitivo.BOOLEANO, _$[$0].first_line, _$[$0].first_column); 
break;
case 115:
 this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 116:
 this.$ = new AccesoVector($$[$0-3],$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 117:
 this.$ = new AccesoLista($$[$0-3],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 118:
 this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 119:
 this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 120:
 this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 121:
 this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 122:
 this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 123:
 this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 124:
 this.$ = new Tostring($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,27:23,28:20,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{1:[3]},{2:$V0,5:[1,52],6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,27:23,28:20,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,3]),o($Vz,[2,4]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,13]),{18:[1,54]},{18:[1,55]},{18:[1,56]},{16:57,43:[1,58]},{18:[1,59],38:[1,60]},{23:[1,61]},{29:62,43:[1,63]},{40:[1,64]},o($VA,$VB,{23:$VC,30:$VD,33:$VE,44:$VF}),{18:[1,69],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:[1,82]},{23:[1,83]},{23:[1,84]},{23:[1,85]},{2:$VS,36:$VT,56:86},{43:[1,89]},{18:[2,88],23:$V5,27:90,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($VV,[2,51]),o($VV,[2,52]),o($VV,[2,53]),o($VV,[2,54]),o($VV,[2,55]),{23:$V5,27:92,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:93,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:94,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($VW,[2,109]),o($VW,[2,110]),o($VW,[2,111]),o($VW,[2,112]),o($VW,[2,113]),o($VW,[2,114]),{23:[1,95]},{23:[1,96]},{23:[1,97]},{23:[1,98]},{23:[1,99]},{23:[1,100]},{23:[1,101]},{1:[2,1]},o($Vz,[2,2]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),{23:$VC},o($Vz,[2,18]),o($Vz,[2,65]),{23:$V5,24:102,27:103,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{18:[1,104],26:$VX,30:[1,105],33:[1,106]},o($VY,$VZ,{23:[1,108]}),{28:109,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc},{16:113,23:$V_,27:110,31:111,32:112,42:[1,114],43:$V$,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:117,33:[1,118],43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{45:[1,119]},{23:$V5,25:[1,120],27:122,43:$VU,69:121,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,39]),{23:$V5,27:123,43:$VU,71:[1,124],72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:125,43:$VU,72:[1,126],81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:127,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:128,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:129,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:130,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:131,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:132,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:133,30:[1,134],43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:135,30:[1,136],43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:137,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:138,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:139,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:140,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:141,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{8:142,9:143,23:$V5,27:23,28:144,39:$V6,43:[1,145],48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{64:[1,146]},{2:$V0,4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,27:23,28:20,38:[1,148],39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{38:[1,149]},{23:[1,150]},{18:[2,89],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($VW,$VB,{33:$V01}),o($VW,[2,96]),o($VW,[2,105]),{25:[1,152],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:153,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:154,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:155,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:156,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:157,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:158,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:159,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{25:[1,160],26:[1,161]},o($V11,[2,21],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($Vz,[2,22]),{16:165,23:$V_,27:162,31:163,32:164,43:$V$,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{34:[1,166]},{43:[1,167]},{25:[1,169],28:170,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,67:168},{41:[1,171]},{18:[1,172],40:$VG,41:$VH,53:$V21,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{18:[1,174]},{18:[1,175]},o($Vz,[2,38]),{23:[1,176]},{23:$V5,27:94,43:$VU,47:177,48:[1,178],49:[1,179],50:[1,180],72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o([18,40,41,53,71,72,73,74,75,76,77,78,79,80],$VB,{23:$VC,33:$V01}),{34:[1,181],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:182,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:[1,183]},{18:[1,184]},{25:[1,185],26:[1,186]},o($V11,[2,87],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($V31,[2,90],{73:$VK,74:$VL,75:$VM,76:$VN}),o($VW,[2,106]),o($V31,[2,91],{73:$VK,74:$VL,75:$VM,76:$VN}),o($VW,[2,107],{27:92,23:$V5,43:$VU,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),o($V41,[2,92],{75:$VM}),o($V41,[2,93],{75:$VM}),o($VW,[2,94]),o($V41,[2,95],{75:$VM}),o($V51,[2,97],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($V51,[2,98],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($V61,[2,99],{71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{23:$V5,27:187,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($V61,[2,100],{71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{23:$V5,27:188,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o([18,25,26,34,38,53,54,79,80],[2,103],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP}),o([18,25,26,34,38,53,54,80],[2,104],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ}),{25:[1,189],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,190],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,191],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:192,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:193,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{29:62,43:$V71},o($VA,$VB,{30:$VD,33:$VE,44:$VF}),{23:[1,195]},{2:$V0,6:53,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,27:23,28:20,38:[1,196],39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($V81,[2,62]),o($V81,[2,63]),{25:[1,198],28:170,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,67:197},{23:$V5,27:199,33:[1,200],43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($VW,[2,108]),{25:[1,201],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,202],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,203],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,204],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,205],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,206],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,207],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{18:[1,208]},{23:$V5,27:209,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{18:[1,210],40:$VG,41:$VH,53:$V21,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{18:[1,211]},{18:[1,212]},o($Vz,[2,26]),{30:[1,213]},o($VY,[2,31]),{25:[1,214],26:$V91},{2:$VS,36:$VT,56:216},{43:[1,217]},{29:218,43:$V71},o($Vz,[2,35]),{23:$V5,27:219,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,36]),o($Vz,[2,37]),{23:$V5,27:220,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{25:[1,221]},{25:[2,48]},{25:[2,49]},{25:[2,50]},o($VA,$Va1,{30:[1,222]}),{34:[1,223],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:224,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,84]),{18:[1,225]},{23:$V5,27:226,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($V61,[2,101],{71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o($V61,[2,102],{71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{2:$VS,36:$VT,56:227},{36:[1,228]},{2:$VS,36:$VT,56:229},{18:[1,230],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{18:[1,231],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($VY,$VZ),{23:$V5,27:232,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($V81,[2,61]),{25:[1,233],26:$V91},{2:$VS,36:$VT,56:234},{34:[1,235],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:236,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),o($VW,[2,123]),o($VW,[2,124]),o($Vz,[2,19]),o($V11,[2,20],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($Vz,[2,23]),o($Vz,[2,24]),o($Vz,[2,25]),{35:[1,237],36:[1,238]},{2:$VS,36:$VT,56:239},{28:240,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc},o($Vz,[2,79]),o($V11,[2,83]),{26:$VX,30:[1,241]},{40:$VG,41:$VH,54:[1,242],71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,243],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{23:$V5,27:244,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:245,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{34:[1,246]},{25:[1,247],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($Vz,[2,85]),o($V11,[2,86],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($Vz,[2,60],{57:248,58:[1,249]}),{60:250,61:[1,251],63:[1,252]},o($Vz,[2,72]),{23:$V5,27:253,43:$Vb1,46:254,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{23:$V5,27:256,43:$Vb1,46:257,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{25:[1,258],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{2:$VS,36:$VT,56:259},o($Vz,[2,81]),o($VW,$Va1),{34:[1,260],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{28:261,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc},{23:$V5,27:263,37:262,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,78]),{43:[1,264]},{35:[1,265],42:[1,266]},{23:$V5,27:267,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{18:[1,268]},o($Vc1,[2,47],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),{18:[1,269],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($VA,$Vd1,{30:[1,270]}),{18:[1,271]},o($Vz,[2,57]),{2:$VS,10:273,36:$VT,55:$Vd,56:272},{38:[1,274],61:[1,275],63:[1,276]},{23:$V5,27:277,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{54:[1,278]},{25:[1,279],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,280]},o([25,40,41,71,72,73,74,75,76,77,78,79,80],$VB,{30:[1,281],33:$V01}),{25:[1,282],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[1,283]},{18:[1,284]},o($Vz,[2,80]),{34:[1,285]},{33:[1,286]},{26:[1,288],38:[1,287]},o($Ve1,[2,34],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($V11,[2,82]),{39:[1,289]},{23:[1,290]},o($Vc1,[2,56],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),o($Vz,[2,43]),o($Vz,[2,40]),{23:$V5,27:291,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},o($Vz,[2,41]),o($Vz,[2,58]),o($Vz,[2,59]),o($Vz,[2,64]),{23:$V5,27:292,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{54:[1,293]},{40:$VG,41:$VH,54:[1,294],71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($Vf1,$Vg1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,28:20,27:23,62:295,4:296,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),{2:$VS,36:$VT,56:297},{2:$VS,36:$VT,56:298},{23:$V_,27:299,31:300,32:301,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{2:$VS,36:$VT,56:302},{2:$VS,36:$VT,56:303},o($Vz,[2,77]),o($VW,$Vd1),{23:$V5,27:304,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{18:[1,305]},{23:$V5,27:306,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{40:[1,307]},{23:$V5,27:308,43:$VU,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy},{18:[1,309],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{40:$VG,41:$VH,54:[1,310],71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($Vf1,$Vg1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,28:20,27:23,4:296,62:311,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),o($Vf1,$Vg1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,28:20,27:23,4:296,62:312,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),o($Vf1,[2,68]),o($Vf1,[2,70],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,28:20,27:23,6:53,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),o($Vz,[2,73]),o($Vz,[2,75]),{25:[2,44],40:$VG,41:$VH,53:$V21,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},{25:[2,45]},{25:[2,46]},o($Vz,[2,74]),o($Vz,[2,76]),{34:[1,313],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($Vz,[2,28]),o($Ve1,[2,33],{40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR}),{28:314,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc},{25:[1,315],40:$VG,41:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,79:$VQ,80:$VR},o($Vz,[2,42]),o($Vf1,$Vg1,{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,28:20,27:23,4:296,62:316,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,23:$V5,39:$V6,43:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,55:$Vd,59:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vi,70:$Vj,72:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy}),o($Vf1,[2,69]),o($Vf1,[2,66]),{18:[1,317]},{41:[1,318]},{18:[1,319]},o($Vf1,[2,67]),o($Vz,[2,27]),{18:[1,320]},o($Vz,[2,30]),o($Vz,[2,29])],
defaultActions: {52:[2,1],178:[2,48],179:[2,49],180:[2,50],300:[2,45],301:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Primitivo,TipoPrimitivo} = require('./Expresion/Primitivo');
    const {Aritmetica, TipoAritmetica} = require('./Expresion/Aritmetica');
    const {Relacional,TipoRelacional} = require('./Expresion/Relacional');
    const {Logicos,TipoLogico} = require('./Expresion/Logicos');
    const {Declarar} = require('./Instruccion/Declarar');
    const {DeclararVector} = require('./Instruccion/DeclararVector');
    const {DeclararLista} = require('./Instruccion/DeclararLista');
    const {Asignar} = require('./Instruccion/Asignar');
    const {AsignarVector} = require('./Instruccion/AsignarVector');
    const {AsignarLista} = require('./Instruccion/AsignarLista');
    const {Ternario} = require('./Instruccion/Ternario');
    const {Acceso} = require('./Expresion/Acceso');
    const {AccesoVector} = require('./Expresion/AccesoVector');
    const {AccesoLista} = require('./Expresion/AccesoLista');
    const {Casteo} = require('./Instruccion/Casteo');
    const {IncrementoDecremento} = require('./Expresion/IncrementoDecremento');
    const {ModificarLista} = require('./Instruccion/ModificarLista');

    const {Print} = require('./Instruccion/Print');
    const {ToLower} = require('./Instruccion/ToLower');
    const {ToUpper} = require('./Instruccion/ToUpper');
    const {Length} = require('./Instruccion/Length');
    const {Break} = require('./Instruccion/Break');
    const {Continue} = require('./Instruccion/Continue');
    const {Return} = require('./Instruccion/Return');
    const {Truncate} = require('./Instruccion/Truncate');
    const {Round} = require('./Instruccion/Round');
    const {Typeof} = require('./Instruccion/Typeof');
    const {Tostring} = require('./Instruccion/Tostring');
    const {DeclararListaChar} = require('./Instruccion/DeclararListaChar');
    const {AsignarListaChar} = require('./Instruccion/AsignarListaChar');

    const {If} = require('./Instruccion/If');
    const {Statement} = require('./Instruccion/Statement');
    const {SwitchCase} = require('./Instruccion/SwitchCase');
    const {Default} = require('./Instruccion/Default');
    const {While} = require('./Instruccion/While');
    const {DoWhile} = require('./Instruccion/DoWhile');
    const {For} = require('./Instruccion/For');

    const {Funcion} = require('./Instruccion/Funcion');
    const {LlamadaFuncion} = require('./Instruccion/LlamadaFuncion');
    const {Main} = require('./Instruccion/Main');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 18;
break;
case 1:return 23;
break;
case 2:return 25;
break;
case 3:return 44;
break;
case 4:return 54;
break;
case 5:return 26;
break;
case 6:return 33;
break;
case 7:return 34;
break;
case 8:return 36;
break;
case 9:return 38;
break;
case 10:return 53;
break;
case 11:return 30;
break;
case 12:return 22;
break;
case 13:return 86;
break;
case 14:return 87;
break;
case 15:return 35;
break;
case 16:return 39;
break;
case 17:return 45;
break;
case 18:return 88;
break;
case 19:return 89;
break;
case 20:return 90;
break;
case 21:return 55;
break;
case 22:return 58;
break;
case 23:return 59;
break;
case 24:return 61;
break;
case 25:return 19;
break;
case 26:return 63;
break;
case 27:return 64;
break;
case 28:return 65;
break;
case 29:return 66;
break;
case 30:return 68;
break;
case 31:return 20;
break;
case 32:return 70;
break;
case 33:return 91;
break;
case 34:return 92;
break;
case 35:return 93;
break;
case 36:return 94;
break;
case 37:return 42;
break;
case 38:return 21;
break;
case 39:return 71;
break;
case 40:return 72;
break;
case 41:return 73;
break;
case 42:return 74;
break;
case 43:return 75;
break;
case 44:return 76;
break;
case 45:return 77;
break;
case 46:return 78;
break;
case 47:return 40;
break;
case 48:return 'MENORIGUAL';
break;
case 49:return 41;                 
break;
case 50:return 'MAYORIGUAL';
break;
case 51:return 79;
break;
case 52:return 80;
break;
case 53:return 81;
break;
case 54:return 48;
break;
case 55:return 51;
break;
case 56:return 50;
break;
case 57:return 52;
break;
case 58:return 49;
break;
case 59:
break;
case 60:
break;
case 61:
break;
case 62:
break;
case 63:return 43;
break;
case 64:return 83;
break;
case 65:return 82;
break;
case 66: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 85; 
break;
case 67: cadena = ""; this.begin("string"); 
break;
case 68: cadena += yy_.yytext; 
break;
case 69: cadena += "\""; 
break;
case 70: cadena += "\n"; 
break;
case 71: cadena += "\t"; 
break;
case 72: cadena += "\\"; 
break;
case 73: cadena += "\'"; 
break;
case 74: yy_.yytext = cadena; this.popState(); return 84; 
break;
case 75:return 5;
break;
case 76: console.log('Error lexico: '+yy_.yytext+', en la linea: '+yy_.yylloc.first_line+', en la columna: '+yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?:=)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:main\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}